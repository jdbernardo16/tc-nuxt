{"version":3,"file":"CountrySelect-Bbh0jiQO.js","sources":["../../../../../../../woonuxt_base/app/constants/index.ts","../../../../../../../woonuxt_base/app/composables/useCountry.ts","../../../../../../../woonuxt_base/app/components/shopElements/StateSelect.vue","../../../../../../../woonuxt_base/app/components/shopElements/CountrySelect.vue"],"sourcesContent":["export const countries: GeoLocation[] = [\n  { name: 'Afghanistan', code: 'AF' },\n  { name: 'Åland Islands', code: 'AX' },\n  { name: 'Albania', code: 'AL' },\n  { name: 'Algeria', code: 'DZ' },\n  { name: 'Andorra', code: 'AD' },\n  { name: 'Angola', code: 'AO' },\n  { name: 'Anguilla', code: 'AI' },\n  { name: 'Antarctica', code: 'AQ' },\n  { name: 'Antigua and Barbuda', code: 'AG' },\n  { name: 'Argentina', code: 'AR' },\n  { name: 'Armenia', code: 'AM' },\n  { name: 'Aruba', code: 'AW' },\n  { name: 'Australia', code: 'AU' },\n  { name: 'Austria', code: 'AT' },\n  { name: 'Azerbaijan', code: 'AZ' },\n  { name: 'Bahamas', code: 'BS' },\n  { name: 'Bahrain', code: 'BH' },\n  { name: 'Bangladesh', code: 'BD' },\n  { name: 'Barbados', code: 'BB' },\n  { name: 'Belarus', code: 'BY' },\n  { name: 'Belgium', code: 'BE' },\n  { name: 'Belau', code: 'PW' },\n  { name: 'Belize', code: 'BZ' },\n  { name: 'Benin', code: 'BJ' },\n  { name: 'Bermuda', code: 'BM' },\n  { name: 'Bhutan', code: 'BT' },\n  { name: 'Bolivia', code: 'BO' },\n  { name: 'Bonaire, Saint Eustatius and Saba', code: 'BQ' },\n  { name: 'Bosnia and Herzegovina', code: 'BA' },\n  { name: 'Botswana', code: 'BW' },\n  { name: 'Bouvet Island', code: 'BV' },\n  { name: 'Brazil', code: 'BR' },\n  { name: 'British Indian Ocean Territory', code: 'IO' },\n  { name: 'British Virgin Islands', code: 'VG' },\n  { name: 'Brunei', code: 'BN' },\n  { name: 'Bulgaria', code: 'BG' },\n  { name: 'Burkina Faso', code: 'BF' },\n  { name: 'Burundi', code: 'BI' },\n  { name: 'Cambodia', code: 'KH' },\n  { name: 'Cameroon', code: 'CM' },\n  { name: 'Canada', code: 'CA' },\n  { name: 'Cape Verde', code: 'CV' },\n  { name: 'Cayman Islands', code: 'KY' },\n  { name: 'Central African Republic', code: 'CF' },\n  { name: 'Chad', code: 'TD' },\n  { name: 'Chile', code: 'CL' },\n  { name: 'China', code: 'CN' },\n  { name: 'Christmas Island', code: 'CX' },\n  { name: 'Cocos (Keeling) Islands', code: 'CC' },\n  { name: 'Colombia', code: 'CO' },\n  { name: 'Comoros', code: 'KM' },\n  { name: 'Congo (Brazzaville)', code: 'CG' },\n  { name: 'Congo (Kinshasa)', code: 'CD' },\n  { name: 'Cook Islands', code: 'CK' },\n  { name: 'Costa Rica', code: 'CR' },\n  { name: 'Croatia', code: 'HR' },\n  { name: 'Cuba', code: 'CU' },\n  { name: 'CuraÇao', code: 'CW' },\n  { name: 'Cyprus', code: 'CY' },\n  { name: 'Czech Republic', code: 'CZ' },\n  { name: 'Denmark', code: 'DK' },\n  { name: 'Djibouti', code: 'DJ' },\n  { name: 'Dominica', code: 'DM' },\n  { name: 'Dominican Republic', code: 'DO' },\n  { name: 'Ecuador', code: 'EC' },\n  { name: 'Egypt', code: 'EG' },\n  { name: 'El Salvador', code: 'SV' },\n  { name: 'Equatorial Guinea', code: 'GQ' },\n  { name: 'Eritrea', code: 'ER' },\n  { name: 'Estonia', code: 'EE' },\n  { name: 'Ethiopia', code: 'ET' },\n  { name: 'Falkland Islands', code: 'FK' },\n  { name: 'Faroe Islands', code: 'FO' },\n  { name: 'Fiji', code: 'FJ' },\n  { name: 'Finland', code: 'FI' },\n  { name: 'France', code: 'FR' },\n  { name: 'French Guiana', code: 'GF' },\n  { name: 'French Polynesia', code: 'PF' },\n  { name: 'French Southern Territories', code: 'TF' },\n  { name: 'Gabon', code: 'GA' },\n  { name: 'Gambia', code: 'GM' },\n  { name: 'Georgia', code: 'GE' },\n  { name: 'Germany', code: 'DE' },\n  { name: 'Ghana', code: 'GH' },\n  { name: 'Gibraltar', code: 'GI' },\n  { name: 'Greece', code: 'GR' },\n  { name: 'Greenland', code: 'GL' },\n  { name: 'Grenada', code: 'GD' },\n  { name: 'Guadeloupe', code: 'GP' },\n  { name: 'Guatemala', code: 'GT' },\n  { name: 'Guernsey', code: 'GG' },\n  { name: 'Guinea', code: 'GN' },\n  { name: 'Guinea-Bissau', code: 'GW' },\n  { name: 'Guyana', code: 'GY' },\n  { name: 'Haiti', code: 'HT' },\n  { name: 'Heard Island and McDonald Islands', code: 'HM' },\n  { name: 'Honduras', code: 'HN' },\n  { name: 'Hong Kong', code: 'HK' },\n  { name: 'Hungary', code: 'HU' },\n  { name: 'Iceland', code: 'IS' },\n  { name: 'India', code: 'IN' },\n  { name: 'Indonesia', code: 'ID' },\n  { name: 'Iran', code: 'IR' },\n  { name: 'Iraq', code: 'IQ' },\n  { name: 'Republic of Ireland', code: 'IE' },\n  { name: 'Isle of Man', code: 'IM' },\n  { name: 'Israel', code: 'IL' },\n  { name: 'Italy', code: 'IT' },\n  { name: 'Ivory Coast', code: 'CI' },\n  { name: 'Jamaica', code: 'JM' },\n  { name: 'Japan', code: 'JP' },\n  { name: 'Jersey', code: 'JE' },\n  { name: 'Jordan', code: 'JO' },\n  { name: 'Kazakhstan', code: 'KZ' },\n  { name: 'Kenya', code: 'KE' },\n  { name: 'Kiribati', code: 'KI' },\n  { name: 'Kuwait', code: 'KW' },\n  { name: 'Kyrgyzstan', code: 'KG' },\n  { name: 'Laos', code: 'LA' },\n  { name: 'Latvia', code: 'LV' },\n  { name: 'Lebanon', code: 'LB' },\n  { name: 'Lesotho', code: 'LS' },\n  { name: 'Liberia', code: 'LR' },\n  { name: 'Libya', code: 'LY' },\n  { name: 'Liechtenstein', code: 'LI' },\n  { name: 'Lithuania', code: 'LT' },\n  { name: 'Luxembourg', code: 'LU' },\n  { name: 'Macao S.A.R., China', code: 'MO' },\n  { name: 'Macedonia', code: 'MK' },\n  { name: 'Madagascar', code: 'MG' },\n  { name: 'Malawi', code: 'MW' },\n  { name: 'Malaysia', code: 'MY' },\n  { name: 'Maldives', code: 'MV' },\n  { name: 'Mali', code: 'ML' },\n  { name: 'Malta', code: 'MT' },\n  { name: 'Marshall Islands', code: 'MH' },\n  { name: 'Martinique', code: 'MQ' },\n  { name: 'Mauritania', code: 'MR' },\n  { name: 'Mauritius', code: 'MU' },\n  { name: 'Mayotte', code: 'YT' },\n  { name: 'Mexico', code: 'MX' },\n  { name: 'Micronesia', code: 'FM' },\n  { name: 'Moldova', code: 'MD' },\n  { name: 'Monaco', code: 'MC' },\n  { name: 'Mongolia', code: 'MN' },\n  { name: 'Montenegro', code: 'ME' },\n  { name: 'Montserrat', code: 'MS' },\n  { name: 'Morocco', code: 'MA' },\n  { name: 'Mozambique', code: 'MZ' },\n  { name: 'Myanmar', code: 'MM' },\n  { name: 'Namibia', code: 'NA' },\n  { name: 'Nauru', code: 'NR' },\n  { name: 'Nepal', code: 'NP' },\n  { name: 'Netherlands', code: 'NL' },\n  { name: 'Netherlands Antilles', code: 'AN' },\n  { name: 'New Caledonia', code: 'NC' },\n  { name: 'New Zealand', code: 'NZ' },\n  { name: 'Nicaragua', code: 'NI' },\n  { name: 'Niger', code: 'NE' },\n  { name: 'Nigeria', code: 'NG' },\n  { name: 'Niue', code: 'NU' },\n  { name: 'Norfolk Island', code: 'NF' },\n  { name: 'North Korea', code: 'KP' },\n  { name: 'Norway', code: 'NO' },\n  { name: 'Oman', code: 'OM' },\n  { name: 'Pakistan', code: 'PK' },\n  { name: 'Palestinian Territory', code: 'PS' },\n  { name: 'Panama', code: 'PA' },\n  { name: 'Papua New Guinea', code: 'PG' },\n  { name: 'Paraguay', code: 'PY' },\n  { name: 'Peru', code: 'PE' },\n  { name: 'Philippines', code: 'PH' },\n  { name: 'Pitcairn', code: 'PN' },\n  { name: 'Poland', code: 'PL' },\n  { name: 'Portugal', code: 'PT' },\n  { name: 'Qatar', code: 'QA' },\n  { name: 'Reunion', code: 'RE' },\n  { name: 'Romania', code: 'RO' },\n  { name: 'Russia', code: 'RU' },\n  { name: 'Rwanda', code: 'RW' },\n  { name: 'Saint Barthélemy', code: 'BL' },\n  { name: 'Saint Helena', code: 'SH' },\n  { name: 'Saint Kitts and Nevis', code: 'KN' },\n  { name: 'Saint Lucia', code: 'LC' },\n  { name: 'Saint Martin (French part)', code: 'MF' },\n  { name: 'Saint Martin (Dutch part)', code: 'SX' },\n  { name: 'Saint Pierre and Miquelon', code: 'PM' },\n  { name: 'Saint Vincent and the Grenadines', code: 'VC' },\n  { name: 'San Marino', code: 'SM' },\n  { name: 'São Tomé and Príncipe', code: 'ST' },\n  { name: 'Saudi Arabia', code: 'SA' },\n  { name: 'Senegal', code: 'SN' },\n  { name: 'Serbia', code: 'RS' },\n  { name: 'Seychelles', code: 'SC' },\n  { name: 'Sierra Leone', code: 'SL' },\n  { name: 'Singapore', code: 'SG' },\n  { name: 'Slovakia', code: 'SK' },\n  { name: 'Slovenia', code: 'SI' },\n  { name: 'Solomon Islands', code: 'SB' },\n  { name: 'Somalia', code: 'SO' },\n  { name: 'South Africa', code: 'ZA' },\n  { name: 'South Georgia/Sandwich Islands', code: 'GS' },\n  { name: 'South Korea', code: 'KR' },\n  { name: 'South Sudan', code: 'SS' },\n  { name: 'Spain', code: 'ES' },\n  { name: 'Sri Lanka', code: 'LK' },\n  { name: 'Sudan', code: 'SD' },\n  { name: 'Suriname', code: 'SR' },\n  { name: 'Svalbard and Jan Mayen', code: 'SJ' },\n  { name: 'Swaziland', code: 'SZ' },\n  { name: 'Sweden', code: 'SE' },\n  { name: 'Switzerland', code: 'CH' },\n  { name: 'Syria', code: 'SY' },\n  { name: 'Taiwan', code: 'TW' },\n  { name: 'Tajikistan', code: 'TJ' },\n  { name: 'Tanzania', code: 'TZ' },\n  { name: 'Thailand', code: 'TH' },\n  { name: 'Timor-Leste', code: 'TL' },\n  { name: 'Togo', code: 'TG' },\n  { name: 'Tokelau', code: 'TK' },\n  { name: 'Tonga', code: 'TO' },\n  { name: 'Trinidad and Tobago', code: 'TT' },\n  { name: 'Tunisia', code: 'TN' },\n  { name: 'Turkey', code: 'TR' },\n  { name: 'Turkmenistan', code: 'TM' },\n  { name: 'Turks and Caicos Islands', code: 'TC' },\n  { name: 'Tuvalu', code: 'TV' },\n  { name: 'Uganda', code: 'UG' },\n  { name: 'Ukraine', code: 'UA' },\n  { name: 'United Arab Emirates', code: 'AE' },\n  { name: 'United Kingdom (UK)', code: 'GB' },\n  { name: 'United States (US)', code: 'US' },\n  { name: 'Uruguay', code: 'UY' },\n  { name: 'Uzbekistan', code: 'UZ' },\n  { name: 'Vanuatu', code: 'VU' },\n  { name: 'Vatican', code: 'VA' },\n  { name: 'Venezuela', code: 'VE' },\n  { name: 'Vietnam', code: 'VN' },\n  { name: 'Wallis and Futuna', code: 'WF' },\n  { name: 'Western Sahara', code: 'EH' },\n  { name: 'Western Samoa', code: 'WS' },\n  { name: 'Yemen', code: 'YE' },\n  { name: 'Zambia', code: 'ZM' },\n  { name: 'Zimbabwe', code: 'ZW' },\n];\n","import type { CountriesEnum } from '#gql/default'\nimport { countries } from '#constants'\n\nexport const useCountry = () => {\n    // State to store allowed countries\n    const allowedCountries = useState<CountriesEnum[] | null>('allowedCountries', () => null)\n    const isLoadingAllowedCountries = useState<boolean>('isLoadingAllowedCountries', () => false)\n\n    // State to store the countries to be shown - init with static countries\n    const countriesToShow = useState<GeoLocation[]>('countriesToShow', () => countries)\n\n    // State to store states for each country state\n    const countryStatesDict = useState<{ [code: string]: GeoLocation[] }>('countryStatesDict', () => ({}))\n    const isLoadingCountryStates = useState<{ [code: string]: boolean }>('isLoadingCountryStates', () => ({}))\n\n    // Function to get allowed countries from API\n    async function getAllowedCountries() {\n        if (allowedCountries.value || isLoadingAllowedCountries.value) {\n            return\n        }\n\n        isLoadingAllowedCountries.value = true\n\n        try {\n            const response = await GqlGetAllowedCountries()\n            if (response.allowedCountries) {\n                // Filter out null values and store the result\n                allowedCountries.value = response.allowedCountries.filter(\n                    (country): country is CountriesEnum => country !== null,\n                )\n\n                // Filter countries to show based on allowed countries\n                countriesToShow.value = countries.filter((country) =>\n                    allowedCountries.value?.includes(country.code as CountriesEnum),\n                )\n            }\n        } catch (error) {\n            console.error('Failed to retrieve allowed countries', error)\n        } finally {\n            isLoadingAllowedCountries.value = false\n        }\n    }\n\n    // Function to get states for a specific country from API - once\n    async function getStatesForCountry(countryCode: CountriesEnum) {\n        if (countryStatesDict.value[countryCode] || isLoadingCountryStates.value[countryCode]) {\n            return\n        }\n\n        isLoadingCountryStates.value[countryCode] = true\n\n        try {\n            const { countryStates } = await GqlGetStates({ country: countryCode })\n            if (countryStates) {\n                countryStatesDict.value[countryCode] = countryStates as GeoLocation[]\n            }\n        } catch (error) {\n            console.error(`Failed to retrieve states for country ${countryCode}`, error)\n        } finally {\n            isLoadingCountryStates.value[countryCode] = false\n        }\n    }\n\n    return {\n        getAllowedCountries,\n        countriesToShow,\n        getStatesForCountry,\n        countryStatesDict,\n    }\n}\n","<script setup>\nconst props = defineProps({\n    modelValue: { type: String, default: '' },\n    countryCode: { type: String, default: '' },\n})\n\nconst { getStatesForCountry, countryStatesDict } = useCountry()\nconst emit = defineEmits(['update:modelValue'])\n\nfunction select(evt) {\n    emit('update:modelValue', evt.target.value)\n}\n\nasync function updateState() {\n    if (props.countryCode && props.countryCode.length > 0) {\n        await getStatesForCountry(props.countryCode)\n    }\n}\n\nonMounted(() => {\n    updateState()\n})\n\nwatch(\n    () => props.countryCode,\n    () => {\n        updateState()\n    },\n)\n</script>\n\n<template>\n    <select\n        @change=\"select\"\n        v-if=\"countryStatesDict[props.countryCode]?.length\"\n        class=\"h-[42px]\"\n    >\n        <option\n            value=\"\"\n            :selected=\"!props.modelValue\"\n        >\n            Select a state\n        </option>\n        <option\n            v-for=\"state in countryStatesDict[props.countryCode]\"\n            :key=\"state.code\"\n            :value=\"state.code\"\n            :selected=\"state.code === props.modelValue\"\n        >\n            {{ state.name }}\n        </option>\n    </select>\n    <input\n        v-else\n        type=\"text\"\n        @change=\"select\"\n        placeholder=\"State\"\n    />\n</template>\n","<script setup>\nconst props = defineProps({\n    modelValue: { type: String, default: '' },\n})\n\nconst { getAllowedCountries, countriesToShow } = useCountry()\nconst emit = defineEmits(['update:modelValue'])\n\nonMounted(() => {\n    getAllowedCountries()\n})\n\nfunction select(evt) {\n    emit('update:modelValue', evt.target.value)\n}\n</script>\n\n<template>\n    <select\n        :value=\"modelValue\"\n        @change=\"select\"\n        required\n        class=\"h-[42px]\"\n    >\n        <option\n            value=\"\"\n            disabled\n        >\n            Select a country\n        </option>\n        <option\n            v-for=\"country in countriesToShow\"\n            :key=\"country.code\"\n            :value=\"country.code\"\n        >\n            {{ country.name }}\n        </option>\n    </select>\n</template>\n"],"names":[],"mappings":"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"}