{"file":"checkout-JpbhXrYg.js","mappings":"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","names":["_withAsyncContext"],"sources":["../../../../../../nuxt/dist/app/compat/interval.js","../../../../../../../woonuxt_base/app/composables/useCheckout.ts","../../../../../../../woonuxt_base/app/components/forms/BillingDetails.vue","../../../../../../../woonuxt_base/app/components/forms/ShippingDetails.vue","../../../../../../../woonuxt_base/app/components/shopElements/ShippingOptions.vue","../../../../../../../woonuxt_base/app/components/shopElements/PaymentOptions.vue","../../../../../../../woonuxt_base/app/components/shopElements/StripeElement.vue","../../../../../../../woonuxt_base/app/components/cartElements/SwipeCard.vue","../../../../../../../woonuxt_base/app/components/cartElements/QuantityInput.vue","../../../../../../../woonuxt_base/app/components/cartElements/CartCard.vue","../../../../../../../woonuxt_base/app/components/shopElements/AddCoupon.vue","../../../../../../../woonuxt_base/app/components/shopElements/OrderSummary.vue","../../../../../../../woonuxt_base/app/pages/checkout.vue"],"sourcesContent":["import { createError } from \"../composables/error.js\";\nconst intervalError = \"[nuxt] `setInterval` should not be used on the server. Consider wrapping it with an `onNuxtReady`, `onBeforeMount` or `onMounted` lifecycle hook, or ensure you only call it in the browser by checking `import.meta.client`.\";\nexport const setInterval = import.meta.client ? window.setInterval : () => {\n  if (import.meta.dev) {\n    throw createError({\n      statusCode: 500,\n      message: intervalError\n    });\n  }\n  console.error(intervalError);\n};\n","import type { CheckoutInput, UpdateCustomerInput, CreateAccountInput } from '#gql'\n\nexport function useCheckout() {\n    const orderInput = useState<any>('orderInput', () => {\n        return {\n            customerNote: '',\n            paymentMethod: '',\n            shipToDifferentAddress: false,\n            metaData: [{ key: 'order_via', value: 'WooNuxt' }],\n        }\n    })\n\n    const isProcessingOrder = useState<boolean>('isProcessingOrder', () => false)\n\n    // if Country or State are changed, calculate the shipping rates again\n    async function updateShippingLocation() {\n        const { customer, viewer } = useAuth()\n        const { isUpdatingCart, refreshCart } = useCart()\n\n        isUpdatingCart.value = true\n\n        try {\n            const { updateCustomer } = await GqlUpdateCustomer({\n                input: {\n                    id: viewer?.value?.id,\n                    shipping: orderInput.value.shipToDifferentAddress\n                        ? customer.value.shipping\n                        : customer.value.billing,\n                    billing: customer.value.billing,\n                } as UpdateCustomerInput,\n            })\n\n            if (updateCustomer) refreshCart()\n        } catch (error) {\n            console.error(error)\n        }\n    }\n\n    function openPayPalWindow(redirectUrl: string): Promise<boolean> {\n        return new Promise((resolve) => {\n            const width = 750\n            const height = 750\n            const left = window.innerWidth / 2 - width / 2\n            const top = window.innerHeight / 2 - height / 2 + 80\n            const payPalWindow = window.open(redirectUrl, '', `width=${width},height=${height},top=${top},left=${left}`)\n            const timer = setInterval(() => {\n                if (payPalWindow?.closed) {\n                    clearInterval(timer)\n                    resolve(true)\n                }\n            }, 500)\n        })\n    }\n\n    const proccessCheckout = async (isPaid = false) => {\n        const { customer, loginUser } = useAuth()\n        const router = useRouter()\n        const { replaceQueryParam } = useHelpers()\n        const { emptyCart, refreshCart } = useCart()\n\n        isProcessingOrder.value = true\n\n        const { username, password, shipToDifferentAddress } = orderInput.value\n        const billing = customer.value?.billing\n        const shipping = shipToDifferentAddress ? customer.value?.shipping : billing\n\n        try {\n            let checkoutPayload: CheckoutInput = {\n                billing,\n                shipping,\n                metaData: orderInput.value.metaData,\n                paymentMethod: orderInput.value.paymentMethod.id,\n                customerNote: orderInput.value.customerNote,\n                shipToDifferentAddress,\n                transactionId: orderInput.value.transactionId,\n                isPaid,\n            }\n\n            // Create account\n            if (orderInput.value.createAccount) {\n                checkoutPayload.account = { username, password } as CreateAccountInput\n            }\n\n            const { checkout } = await GqlCheckout(checkoutPayload)\n\n            // Login user if account was created during checkout\n            if (orderInput.value.createAccount) {\n                await loginUser({ username, password })\n            }\n\n            const orderId = checkout?.order?.databaseId\n            const orderKey = checkout?.order?.orderKey\n            const orderInputPaymentId = orderInput.value.paymentMethod.id\n            const isPayPal = orderInputPaymentId === 'paypal' || orderInputPaymentId === 'ppcp-gateway'\n\n            // PayPal redirect\n            if ((await checkout?.redirect) && isPayPal) {\n                const frontEndUrl = window.location.origin\n                let redirectUrl = checkout?.redirect ?? ''\n\n                const payPalReturnUrl = `${frontEndUrl}/checkout/order-received/${orderId}/?key=${orderKey}&from_paypal=true`\n                const payPalCancelUrl = `${frontEndUrl}/checkout/?cancel_order=true&from_paypal=true`\n\n                redirectUrl = replaceQueryParam('return', payPalReturnUrl, redirectUrl)\n                redirectUrl = replaceQueryParam('cancel_return', payPalCancelUrl, redirectUrl)\n                redirectUrl = replaceQueryParam('bn', 'WooNuxt_Cart', redirectUrl)\n\n                const isPayPalWindowClosed = await openPayPalWindow(redirectUrl)\n\n                if (isPayPalWindowClosed) {\n                    router.push(`/checkout/order-received/${orderId}/?key=${orderKey}&fetch_delay=true`)\n                }\n            } else {\n                router.push(`/checkout/order-received/${orderId}/?key=${orderKey}`)\n            }\n\n            if ((await checkout?.result) !== 'success') {\n                alert('There was an error processing your order. Please try again.')\n                window.location.reload()\n                return checkout\n            } else {\n                await emptyCart()\n                await refreshCart()\n            }\n        } catch (error: any) {\n            isProcessingOrder.value = false\n\n            const errorMessage = error?.gqlErrors?.[0].message\n\n            if (errorMessage?.includes('An account is already registered with your email address')) {\n                alert('An account is already registered with your email address')\n                return null\n            }\n\n            alert(errorMessage)\n            return null\n        }\n\n        isProcessingOrder.value = false\n    }\n\n    return {\n        orderInput,\n        isProcessingOrder,\n        proccessCheckout,\n        updateShippingLocation,\n    }\n}\n","<script lang=\"ts\" setup>\nconst { updateShippingLocation } = useCheckout()\nconst { isBillingAddressEnabled } = useCart()\n\nconst props = defineProps({\n    modelValue: { type: Object, required: true },\n})\n\nconst billing = toRef(props, 'modelValue')\n</script>\n\n<template>\n    <div class=\"grid w-full gap-4 lg:grid-cols-2\">\n        <div class=\"w-full\">\n            <label for=\"first-name\">{{ $t('messages.billing.firstName') }}</label>\n            <input\n                id=\"first-name\"\n                v-model=\"billing.firstName\"\n                placeholder=\"John\"\n                autocomplete=\"given-name\"\n                type=\"text\"\n                required\n            />\n        </div>\n\n        <div class=\"w-full\">\n            <label for=\"last-name\">{{ $t('messages.billing.lastName') }}</label>\n            <input\n                id=\"last-name\"\n                v-model=\"billing.lastName\"\n                placeholder=\"Doe\"\n                autocomplete=\"family-name\"\n                type=\"text\"\n                required\n            />\n        </div>\n\n        <div\n            v-if=\"isBillingAddressEnabled\"\n            class=\"w-full col-span-full\"\n        >\n            <label for=\"address1\">{{ $t('messages.billing.address1') }}</label>\n            <input\n                id=\"address1\"\n                v-model=\"billing.address1\"\n                placeholder=\"O'Connell Street 47\"\n                autocomplete=\"street-address\"\n                type=\"text\"\n                required\n            />\n        </div>\n\n        <div\n            v-if=\"isBillingAddressEnabled\"\n            class=\"w-full col-span-full\"\n        >\n            <label for=\"address2\">{{ $t('messages.billing.address2') }} ({{ $t('messages.general.optional') }})</label>\n            <input\n                id=\"address2\"\n                v-model=\"billing.address2\"\n                placeholder=\"Apartment, studio, or floor\"\n                autocomplete=\"address-line2\"\n                type=\"text\"\n            />\n        </div>\n\n        <div\n            v-if=\"isBillingAddressEnabled\"\n            class=\"w-full\"\n        >\n            <label for=\"city\">{{ $t('messages.billing.city') }}</label>\n            <input\n                id=\"city\"\n                v-model=\"billing.city\"\n                placeholder=\"New York\"\n                autocomplete=\"locality\"\n                type=\"text\"\n                required\n            />\n        </div>\n\n        <div\n            v-if=\"isBillingAddressEnabled\"\n            class=\"w-full\"\n        >\n            <label for=\"state\">{{ $t('messages.billing.state') }} ({{ $t('messages.general.optional') }})</label>\n            <StateSelect\n                id=\"state\"\n                v-model=\"billing.state\"\n                :default-value=\"billing.state\"\n                :country-code=\"billing.country\"\n                @change=\"updateShippingLocation\"\n                autocomplete=\"address-level1\"\n            />\n        </div>\n\n        <div\n            v-if=\"isBillingAddressEnabled\"\n            class=\"w-full\"\n        >\n            <label for=\"country\">{{ $t('messages.billing.country') }}</label>\n            <CountrySelect\n                id=\"country\"\n                v-model=\"billing.country\"\n                :default-value=\"billing.country\"\n                @change=\"updateShippingLocation\"\n                autocomplete=\"country\"\n            />\n        </div>\n\n        <div\n            v-if=\"isBillingAddressEnabled\"\n            class=\"w-full\"\n        >\n            <label for=\"zip\">{{ $t('messages.billing.zip') }}</label>\n            <input\n                id=\"zip\"\n                v-model=\"billing.postcode\"\n                placeholder=\"10001\"\n                autocomplete=\"postal-code\"\n                type=\"text\"\n                required\n            />\n        </div>\n\n        <div\n            v-if=\"isBillingAddressEnabled\"\n            class=\"w-full col-span-full\"\n        >\n            <label for=\"phone\">{{ $t('messages.billing.phone') }} ({{ $t('messages.general.optional') }})</label>\n            <input\n                id=\"phone\"\n                v-model=\"billing.phone\"\n                placeholder=\"+1 234 567 8901\"\n                autocomplete=\"tel\"\n                type=\"tel\"\n            />\n        </div>\n    </div>\n</template>\n","<script lang=\"ts\" setup>\nconst { updateShippingLocation } = useCheckout()\n\nconst props = defineProps({\n    modelValue: { type: Object, required: true },\n})\n\nconst shipping = toRef(props, 'modelValue')\n</script>\n\n<template>\n    <div class=\"grid w-full gap-4 lg:grid-cols-2\">\n        <div class=\"w-full\">\n            <label for=\"first-name\">{{ $t('messages.billing.firstName') }}</label>\n            <input\n                id=\"first-name\"\n                v-model=\"shipping.firstName\"\n                placeholder=\"John\"\n                autocomplete=\"given-name\"\n                type=\"text\"\n                required\n            />\n        </div>\n\n        <div class=\"w-full\">\n            <label for=\"last-name\">{{ $t('messages.billing.lastName') }}</label>\n            <input\n                id=\"last-name\"\n                v-model=\"shipping.lastName\"\n                placeholder=\"Doe\"\n                autocomplete=\"family-name\"\n                type=\"text\"\n                required\n            />\n        </div>\n\n        <div class=\"w-full col-span-full\">\n            <label for=\"address1\">{{ $t('messages.billing.address1') }}</label>\n            <input\n                id=\"address1\"\n                v-model=\"shipping.address1\"\n                placeholder=\"O'Connell Street 47\"\n                autocomplete=\"street-address\"\n                type=\"text\"\n                required\n            />\n        </div>\n\n        <div class=\"w-full col-span-full\">\n            <label for=\"address2\">{{ $t('messages.billing.address2') }} ({{ $t('messages.general.optional') }})</label>\n            <input\n                id=\"address2\"\n                v-model=\"shipping.address2\"\n                placeholder=\"Apartment, studio, or floor\"\n                autocomplete=\"address-line2\"\n                type=\"text\"\n            />\n        </div>\n\n        <div class=\"w-full\">\n            <label for=\"city\">{{ $t('messages.billing.city') }}</label>\n            <input\n                id=\"city\"\n                v-model=\"shipping.city\"\n                placeholder=\"New York\"\n                autocomplete=\"locality\"\n                type=\"text\"\n                required\n            />\n        </div>\n\n        <div class=\"w-full\">\n            <label for=\"state\">{{ $t('messages.billing.state') }} ({{ $t('messages.general.optional') }})</label>\n            <StateSelect\n                id=\"state\"\n                v-model=\"shipping.state\"\n                :default-value=\"shipping.state\"\n                :country-code=\"shipping.country\"\n                @change=\"updateShippingLocation\"\n            />\n        </div>\n\n        <div class=\"w-full\">\n            <label for=\"country\">{{ $t('messages.billing.country') }}</label>\n            <CountrySelect\n                id=\"country\"\n                v-model=\"shipping.country\"\n                :default-value=\"shipping.country\"\n                @change=\"updateShippingLocation\"\n            />\n        </div>\n\n        <div class=\"w-full\">\n            <label for=\"zip\">{{ $t('messages.billing.zip') }}</label>\n            <input\n                id=\"zip\"\n                v-model=\"shipping.postcode\"\n                placeholder=\"10001\"\n                autocomplete=\"postal-code\"\n                type=\"text\"\n                required\n            />\n        </div>\n\n        <div class=\"w-full col-span-full\">\n            <label for=\"phone\">{{ $t('messages.billing.phone') }} ({{ $t('messages.general.optional') }})</label>\n            <input\n                id=\"phone\"\n                v-model=\"shipping.phone\"\n                placeholder=\"+1 234 567 8901\"\n                autocomplete=\"tel\"\n                type=\"tel\"\n            />\n        </div>\n    </div>\n</template>\n","<script setup>\nconst { updateShippingMethod } = useCart()\nconst runtimeConfig = useRuntimeConfig()\nconst currencySymbol = runtimeConfig?.public?.CURRENCY_SYMBOL || '$'\nconst props = defineProps({\n    options: { type: Array, required: true },\n    activeOption: { type: String, required: true },\n})\n\nconst setActiveOption = async (id) => {\n    await updateShippingMethod(id)\n}\n</script>\n\n<template>\n    <div class=\"grid gap-4 shipping-options\">\n        <div\n            v-for=\"option in options\"\n            :key=\"option.id\"\n            class=\"flex items-center justify-between option\"\n            :class=\"{ 'active-option': option.id === activeOption }\"\n            @click=\"setActiveOption(option.id)\"\n        >\n            <div>\n                <div\n                    class=\"text-sm leading-tight text-gray-500\"\n                    v-html=\"option.label\"\n                ></div>\n                <div class=\"font-semibold text-gray-600\">{{ currencySymbol }}{{ option.cost }}</div>\n            </div>\n\n            <icon\n                name=\"ion:checkmark-circle\"\n                size=\"20\"\n                class=\"ml-auto text-primary checkmark opacity-0\"\n            />\n        </div>\n    </div>\n</template>\n\n<style lang=\"postcss\" scoped>\n.shipping-options {\n    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n\n    .option {\n        @apply bg-white border rounded-lg text-gray-600 cursor-pointer flex flex-1 text-sm py-3 px-4 gap-2 items-center hover:border-purple-300;\n\n        &.active-option {\n            @apply border-primary cursor-default border-opacity-50 shadow-sm pointer-events-none;\n\n            & .checkmark {\n                @apply opacity-100;\n            }\n        }\n    }\n}\n</style>\n","<script setup lang=\"ts\">\nconst props = defineProps<{\n    modelValue: string | object\n    paymentGateways: PaymentGateways\n}>()\n\nconst paymentMethod = toRef(props, 'modelValue')\nconst activePaymentMethod = computed<PaymentGateway>(() => paymentMethod.value as PaymentGateway)\nconst emits = defineEmits(['update:modelValue'])\n\nconst updatePaymentMethod = (value: any) => {\n    emits('update:modelValue', value)\n}\n\nonMounted(() => {\n    // Emit first payment method\n    if (props.paymentGateways?.nodes.length) updatePaymentMethod(props.paymentGateways?.nodes[0])\n})\n</script>\n\n<template>\n    <div class=\"flex gap-4 leading-tight flex-wrap\">\n        <div\n            v-for=\"gateway in paymentGateways?.nodes\"\n            :key=\"gateway.id\"\n            class=\"option\"\n            :class=\"{ 'active-option': gateway.id === activePaymentMethod.id }\"\n            @click=\"updatePaymentMethod(gateway)\"\n            :title=\"gateway?.description || gateway?.title || 'Payment Method'\"\n        >\n            <icon\n                v-if=\"gateway.id === 'stripe'\"\n                name=\"ion:card-outline\"\n                size=\"20\"\n            />\n            <icon\n                v-else-if=\"gateway.id === 'paypal'\"\n                name=\"ion:logo-paypal\"\n                size=\"20\"\n            />\n            <icon\n                v-else\n                name=\"ion:cash-outline\"\n                size=\"20\"\n            />\n            <span\n                class=\"whitespace-nowrap\"\n                v-html=\"gateway.title\"\n            />\n            <icon\n                name=\"ion:checkmark-circle\"\n                size=\"20\"\n                class=\"ml-auto text-primary checkmark opacity-0\"\n            />\n        </div>\n        <div\n            v-if=\"activePaymentMethod.description\"\n            class=\"prose block w-full\"\n        >\n            <p\n                class=\"text-sm text-gray-500\"\n                v-html=\"activePaymentMethod.description\"\n            />\n        </div>\n    </div>\n</template>\n\n<style lang=\"postcss\" scoped>\n.option {\n    @apply bg-white border rounded-lg text-gray-600 cursor-pointer flex flex-1 text-sm py-3 px-4 gap-2 items-center hover:border-purple-300;\n\n    &.active-option {\n        @apply border-primary cursor-default border-opacity-50 shadow-sm pointer-events-none;\n\n        & .checkmark {\n            @apply opacity-100;\n        }\n    }\n}\n</style>\n","<script setup lang=\"ts\">\nconst { cart } = useCart()\nconst { stripe } = defineProps(['stripe'])\n\nconst rawCartTotal = computed(() => cart.value && parseFloat(cart.value.rawTotal as string) * 100)\nconst emit = defineEmits(['updateElement'])\nlet elements = null as any\n\nconst options = {\n    mode: 'payment',\n    currency: 'eur',\n    amount: rawCartTotal.value,\n    // paymentMethodCreation: 'manual',\n}\n\nconst createStripeElements = async () => {\n    elements = stripe.elements(options)\n    const paymentElement = elements.create('card', { hidePostalCode: true })\n    paymentElement.mount('#card-element')\n    emit('updateElement', elements)\n}\n\nonMounted(() => {\n    createStripeElements()\n})\n</script>\n\n<template>\n    <div id=\"card-element\">\n        <!-- Elements will create form elements here -->\n    </div>\n</template>\n","<template>\n    <div\n        v-if=\"isAlive\"\n        class=\"rounded-lg flex h-16 w-full overflow-hidden relative items-center\"\n    >\n        <TrashIcon\n            class=\"transform transition-all right-0 w-6 scale-0 absolute\"\n            :class=\"{ 'scale-100': lengthX > 40, 'delete-ready': lengthX > 80 }\"\n        />\n        <div\n            class=\"rounded-lg inset-0 absolute\"\n            :class=\"{ 'transition-all': !isSwiping }\"\n            ref=\"el\"\n            :style=\"{ transform: isSwiping ? `translateX(-${lengthX}px)` : `none` }\"\n        >\n            <slot />\n        </div>\n    </div>\n</template>\n\n<script setup>\nimport { useSwipe } from '@vueuse/core'\nconst emit = defineEmits(['remove'])\n\nconst isAlive = ref(true)\nconst el = ref(null)\nconst { isSwiping, lengthX } = useSwipe(el, {\n    passive: true,\n    onSwipeEnd() {\n        if (lengthX.value > 80) {\n            isAlive.value = false\n            emit('remove')\n        }\n    },\n})\n</script>\n\n<style lang=\"postcss\">\n.underlay {\n    @apply flex p-4 inset-0 transition-all justify-end absolute items-center;\n}\n.delete-ready {\n    @apply text-red-500;\n}\n</style>\n","<script setup lang=\"ts\">\nconst { updateItemQuantity, isUpdatingCart, cart } = useCart()\nconst { debounce } = useHelpers()\n\nconst { item } = defineProps({ item: { type: Object, required: true } })\n\nconst productType = computed(() => (item.variation ? item.variation?.node : item.product?.node))\nconst quantity = ref(item.quantity)\nconst hasNoMoreStock = computed(() =>\n    productType.value.stockQuantity ? productType.value.stockQuantity <= quantity.value : false,\n)\n\nconst incrementQuantity = () => quantity.value++\nconst decrementQuantity = () => quantity.value--\n\nwatch(\n    quantity,\n    debounce(() => {\n        if (quantity.value !== '') {\n            updateItemQuantity(item.key, quantity.value)\n        }\n    }, 250),\n)\n\nconst onFocusOut = () => {\n    if (quantity.value === '') {\n        // If the quantity is empty, set it to the cart item quantity\n        const cartItem = cart.value?.contents?.nodes?.find((node) => node.key === item.key)\n        if (cartItem) {\n            quantity.value = cartItem.quantity\n        }\n    }\n}\n</script>\n\n<template>\n    <div class=\"flex rounded bg-white text-sm leading-none shadow-sm shadow-gray-200 isolate\">\n        <button\n            title=\"Decrease Quantity\"\n            aria-label=\"Decrease Quantity\"\n            @click=\"decrementQuantity\"\n            type=\"button\"\n            class=\"focus:outline-none border-r w-6 h-6 border rounded-l border-gray-300 hover:bg-gray-50 disabled:cursor-not-allowed\"\n            :disabled=\"isUpdatingCart || quantity <= 0\"\n        >\n            <Icon\n                name=\"ion:remove\"\n                size=\"14\"\n            />\n        </button>\n        <input\n            v-model.number=\"quantity\"\n            type=\"number\"\n            min=\"0\"\n            :max=\"productType.stockQuantity\"\n            aria-label=\"Quantity\"\n            @focusout=\"onFocusOut\"\n            class=\"flex items-center justify-center w-8 px-2 text-right text-xs focus:outline-none border-y border-gray-300\"\n        />\n        <button\n            title=\"Increase Quantity\"\n            aria-label=\"Increase Quantity\"\n            @click=\"incrementQuantity\"\n            type=\"button\"\n            class=\"focus:outline-none border-l w-6 h-6 border rounded-r hover:bg-gray-50 border-gray-300 disabled:cursor-not-allowed disabled:bg-gray-100\"\n            :disabled=\"isUpdatingCart || hasNoMoreStock\"\n        >\n            <Icon\n                name=\"ion:add\"\n                size=\"14\"\n            />\n        </button>\n    </div>\n</template>\n\n<style scoped lang=\"postcss\">\ninput[type='number']::-webkit-inner-spin-button,\ninput[type='number']::-webkit-outer-spin-button {\n    -webkit-appearance: none;\n    margin: 0;\n}\ninput[type='number'] {\n    -moz-appearance: textfield;\n    appearance: textfield;\n}\n</style>\n","<script setup>\nconst { updateItemQuantity } = useCart()\nconst { addToWishlist } = useWishlist()\nconst { FALLBACK_IMG } = useHelpers()\nconst { storeSettings } = useAppConfig()\n\nconst { item } = defineProps({\n    item: { type: Object, required: true },\n})\n\nconst productType = computed(() => (item.variation ? item.variation?.node : item.product?.node))\nconst productSlug = computed(() => `/product/${decodeURIComponent(item.product.node.slug)}`)\nconst isLowStock = computed(() =>\n    productType.value.stockQuantity ? productType.value.lowStockAmount >= productType.value.stockQuantity : false,\n)\nconst imgScr = computed(\n    () =>\n        productType.value.image?.cartSourceUrl ||\n        productType.value.image?.sourceUrl ||\n        item.product.image?.sourceUrl ||\n        FALLBACK_IMG,\n)\nconst regularPrice = computed(() => parseFloat(productType.value.rawRegularPrice))\nconst salePrice = computed(() => parseFloat(productType.value.rawSalePrice))\nconst salePercentage = computed(\n    () => Math.round(((regularPrice.value - salePrice.value) / regularPrice.value) * 100) + '%',\n)\n\nconst removeItem = () => {\n    updateItemQuantity(item.key, 0)\n}\n\nconst moveToWishList = () => {\n    addToWishlist(item.product.node)\n    removeItem()\n}\n</script>\n\n<template>\n    <SwipeCard @remove=\"removeItem\">\n        <div\n            v-if=\"productType\"\n            class=\"flex items-center gap-3 group\"\n        >\n            <NuxtLink :to=\"productSlug\">\n                <NuxtImg\n                    width=\"64\"\n                    height=\"64\"\n                    class=\"w-16 h-16 rounded-md skeleton\"\n                    :src=\"imgScr\"\n                    :alt=\"productType.image?.altText || productType.name\"\n                    :title=\"productType.image?.title || productType.name\"\n                    loading=\"lazy\"\n                />\n            </NuxtLink>\n            <div class=\"flex-1\">\n                <div class=\"flex gap-x-2 gap-y-1 flex-wrap items-center\">\n                    <NuxtLink\n                        class=\"leading-tight\"\n                        :to=\"productSlug\"\n                        >{{ productType.name }}</NuxtLink\n                    >\n                    <span\n                        v-if=\"productType.salePrice\"\n                        class=\"text-[10px] border-green-200 leading-none bg-green-100 inline-block p-0.5 rounded text-green-600 border\"\n                    >\n                        Save {{ salePercentage }}\n                    </span>\n                    <span\n                        v-if=\"isLowStock\"\n                        class=\"text-[10px] border-yellow-200 leading-none bg-yellow-100 inline-block p-0.5 rounded text-orange-500 border\"\n                    >\n                        Low Stock\n                    </span>\n                </div>\n                <ProductPrice\n                    class=\"mt-1 text-xs\"\n                    :sale-price=\"productType.salePrice\"\n                    :regular-price=\"productType.regularPrice\"\n                />\n            </div>\n            <div class=\"inline-flex gap-2 flex-col items-end\">\n                <QuantityInput :item />\n                <div class=\"text-xs text-gray-400 group-hover:text-gray-700 flex leading-none items-center\">\n                    <button\n                        v-if=\"storeSettings.showMoveToWishlist\"\n                        class=\"mr-2 pr-2 border-r\"\n                        @click=\"moveToWishList\"\n                        type=\"button\"\n                    >\n                        Move to Wishlist\n                    </button>\n                    <button\n                        title=\"Remove Item\"\n                        aria-label=\"Remove Item\"\n                        @click=\"removeItem\"\n                        type=\"button\"\n                        class=\"flex items-center gap-1 hover:text-red-500 cursor-pointer\"\n                    >\n                        <Icon\n                            name=\"ion:trash\"\n                            class=\"hidden md:inline-block\"\n                            size=\"12\"\n                        />\n                    </button>\n                </div>\n            </div>\n        </div>\n    </SwipeCard>\n</template>\n","<script setup lang=\"ts\">\nconst { cart, isUpdatingCoupon, applyCoupon, removeCoupon } = useCart()\nconst couponCode = ref<string>('')\nconst errorMessage = ref<string>('')\n\nasync function submitCoupon(): Promise<void> {\n    const { message } = await applyCoupon(couponCode.value)\n    if (message) {\n        errorMessage.value = message\n    } else {\n        couponCode.value = ''\n        errorMessage.value = ''\n    }\n}\n</script>\n\n<template>\n    <div>\n        <form\n            class=\"flex gap-1\"\n            @submit.prevent=\"submitCoupon\"\n        >\n            <input\n                id=\"couponCode\"\n                v-model=\"couponCode\"\n                type=\"text\"\n                :placeholder=\"$t('messages.shop.couponCode')\"\n                class=\"w-full px-4 py-2 bg-white border border-gray-300 rounded-md shadow-sm outline-none\"\n                required\n            />\n            <button\n                class=\"flex items-center justify-center px-4 py-2 text-white bg-gray-800 border rounded-md shadow-sm outline-none min-w-20\"\n                :disabled=\"isUpdatingCoupon\"\n            >\n                <LoadingIcon\n                    v-if=\"isUpdatingCoupon\"\n                    color=\"#fff\"\n                    size=\"16\"\n                />\n                <span v-else>{{ $t('messages.general.apply') }}</span>\n            </button>\n        </form>\n        <Transition\n            name=\"scale-y\"\n            mode=\"out-in\"\n        >\n            <div\n                v-if=\"errorMessage\"\n                class=\"mt-2 text-xs text-red-600\"\n                v-html=\"errorMessage\"\n            ></div>\n        </Transition>\n        <Transition\n            name=\"scale-y\"\n            mode=\"out-in\"\n        >\n            <div\n                v-if=\"cart && cart.appliedCoupons\"\n                class=\"text-xs font-semibold uppercase flex flex-wrap gap-2\"\n            >\n                <div\n                    v-for=\"(coupon, index) in cart.appliedCoupons\"\n                    :key=\"coupon?.code || index\"\n                    class=\"flex flex-wrap mt-2 flex-2\"\n                >\n                    <div\n                        v-if=\"coupon?.code\"\n                        class=\"bg-primary border-primary border rounded-md flex bg-opacity-5 border-opacity-10 text-primary leading-none p-1.5 gap-1 items-center\"\n                    >\n                        <span v-html=\"coupon.code\" />\n                        <Icon\n                            name=\"ion:close\"\n                            class=\"rounded-full cursor-pointer hover:bg-primary hover:text-white\"\n                            @click=\"removeCoupon(coupon.code)\"\n                        />\n                    </div>\n                </div>\n            </div>\n        </Transition>\n    </div>\n</template>\n","<script setup>\nconst { cart, isUpdatingCart } = useCart()\n</script>\n\n<template>\n    <aside\n        v-if=\"cart\"\n        class=\"bg-white rounded-lg shadow-lg mb-8 w-full min-h-[280px] p-4 sm:p-8 relative md:max-w-md md:top-32 md:sticky\"\n    >\n        <h2 class=\"mb-6 text-xl font-semibold leading-none\">{{ $t('messages.shop.orderSummary') }}</h2>\n\n        <ul class=\"flex flex-col gap-4 overflow-y-auto\">\n            <CartCard\n                v-for=\"item in cart.contents.nodes\"\n                :key=\"item.key\"\n                :item\n            />\n        </ul>\n\n        <AddCoupon class=\"my-8\" />\n\n        <div class=\"grid gap-1 text-sm font-semibold text-gray-500\">\n            <div class=\"flex justify-between\">\n                <span>{{ $t('messages.shop.subtotal') }}</span>\n                <span\n                    class=\"text-gray-700 tabular-nums\"\n                    v-html=\"cart.subtotal\"\n                />\n            </div>\n            <div class=\"flex justify-between\">\n                <span>{{ $t('messages.general.shipping') }}</span>\n                <span class=\"text-gray-700 tabular-nums\">\n                    {{ parseFloat(cart.shippingTotal) > 0 ? '+' : '' }} {{ cart.shippingTotal }}\n                </span>\n            </div>\n            <Transition\n                name=\"scale-y\"\n                mode=\"out-in\"\n            >\n                <div\n                    v-if=\"cart && cart.appliedCoupons\"\n                    class=\"flex justify-between\"\n                >\n                    <span>{{ $t('messages.shop.discount') }}</span>\n                    <span class=\"text-primary tabular-nums\">- <span v-html=\"cart.discountTotal\" /></span>\n                </div>\n            </Transition>\n            <div class=\"flex justify-between mt-4\">\n                <span>{{ $t('messages.shop.total') }}</span>\n                <span\n                    class=\"text-lg font-bold text-gray-700 tabular-nums\"\n                    v-html=\"cart.total\"\n                />\n            </div>\n        </div>\n\n        <slot></slot>\n\n        <div\n            v-if=\"isUpdatingCart\"\n            class=\"absolute inset-0 flex items-center justify-center bg-white bg-opacity-50\"\n        >\n            <LoadingIcon />\n        </div>\n    </aside>\n</template>\n","<script setup lang=\"ts\">\nimport { loadStripe } from '@stripe/stripe-js'\nimport type { Stripe, StripeElements, CreateSourceData, StripeCardElement } from '@stripe/stripe-js'\n\nconst { t } = useI18n()\nconst { query } = useRoute()\nconst { cart, isUpdatingCart, paymentGateways } = useCart()\nconst { customer, viewer } = useAuth()\nconst { orderInput, isProcessingOrder, proccessCheckout } = useCheckout()\nconst runtimeConfig = useRuntimeConfig()\nconst stripeKey = runtimeConfig.public?.STRIPE_PUBLISHABLE_KEY || null\n\nconst buttonText = ref<string>(\n    isProcessingOrder.value ? t('messages.general.processing') : t('messages.shop.checkoutButton'),\n)\nconst isCheckoutDisabled = computed<boolean>(\n    () => isProcessingOrder.value || isUpdatingCart.value || !orderInput.value.paymentMethod,\n)\n\nconst isInvalidEmail = ref<boolean>(false)\nconst stripe: Stripe | null = stripeKey ? await loadStripe(stripeKey) : null\nconst elements = ref()\nconst isPaid = ref<boolean>(false)\n\nonBeforeMount(async () => {\n    if (query.cancel_order) window.close()\n})\n\nconst payNow = async () => {\n    buttonText.value = t('messages.general.processing')\n\n    const { stripePaymentIntent } = await GqlGetStripePaymentIntent()\n    const clientSecret = stripePaymentIntent?.clientSecret || ''\n\n    try {\n        if (orderInput.value.paymentMethod.id === 'stripe' && stripe && elements.value) {\n            const cardElement = elements.value.getElement('card') as StripeCardElement\n            const { setupIntent } = await stripe.confirmCardSetup(clientSecret, {\n                payment_method: { card: cardElement },\n            })\n            const { source } = await stripe.createSource(cardElement as CreateSourceData)\n\n            if (source) orderInput.value.metaData.push({ key: '_stripe_source_id', value: source.id })\n            if (setupIntent) orderInput.value.metaData.push({ key: '_stripe_intent_id', value: setupIntent.id })\n\n            isPaid.value = setupIntent?.status === 'succeeded' || false\n            orderInput.value.transactionId = source?.created?.toString() || new Date().getTime().toString()\n        }\n    } catch (error) {\n        console.error(error)\n        buttonText.value = t('messages.shop.placeOrder')\n    }\n\n    proccessCheckout(isPaid.value)\n}\n\nconst handleStripeElement = (stripeElements: StripeElements): void => {\n    elements.value = stripeElements\n}\n\nconst emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4}$/\n\nconst checkEmailOnBlur = (email?: string | null): void => {\n    if (email) isInvalidEmail.value = !emailRegex.test(email)\n}\n\nconst checkEmailOnInput = (email?: string | null): void => {\n    if (email && isInvalidEmail.value) isInvalidEmail.value = !emailRegex.test(email)\n}\n\nuseSeoMeta({\n    title: t('messages.shop.checkout'),\n})\n</script>\n\n<template>\n    <div class=\"flex flex-col min-h-[600px]\">\n        <template v-if=\"cart && customer\">\n            <div\n                v-if=\"cart.isEmpty\"\n                class=\"flex flex-col items-center justify-center flex-1 mb-12\"\n            >\n                <Icon\n                    name=\"ion:cart-outline\"\n                    size=\"156\"\n                    class=\"opacity-25 mb-5\"\n                />\n                <h2 class=\"text-2xl font-bold mb-2\">{{ $t('messages.shop.cartEmpty') }}</h2>\n                <span class=\"text-gray-400 mb-4\">{{ $t('messages.shop.addProductsInYourCart') }}</span>\n                <NuxtLink\n                    to=\"/products\"\n                    class=\"flex items-center justify-center gap-3 p-2 px-3 mt-4 font-semibold text-center text-white rounded-lg shadow-md bg-primary hover:bg-primary-dark\"\n                >\n                    {{ $t('messages.shop.browseOurProducts') }}\n                </NuxtLink>\n            </div>\n\n            <form\n                v-else\n                class=\"container flex flex-wrap items-start gap-8 my-16 justify-evenly lg:gap-20\"\n                @submit.prevent=\"payNow\"\n            >\n                <div class=\"grid w-full max-w-2xl gap-8 checkout-form md:flex-1\">\n                    <!-- Customer details -->\n                    <div v-if=\"!viewer && customer.billing\">\n                        <h2 class=\"w-full mb-2 text-2xl font-semibold leading-none\">Contact Information</h2>\n                        <p class=\"mt-1 text-sm text-gray-500\">\n                            Already have an account?\n                            <a\n                                href=\"/my-account\"\n                                class=\"text-primary text-semibold\"\n                                >Log in</a\n                            >.\n                        </p>\n                        <div class=\"w-full mt-4\">\n                            <label for=\"email\">{{ $t('messages.billing.email') }}</label>\n                            <input\n                                v-model=\"customer.billing.email\"\n                                placeholder=\"johndoe@email.com\"\n                                autocomplete=\"email\"\n                                type=\"email\"\n                                name=\"email\"\n                                :class=\"{ 'has-error': isInvalidEmail }\"\n                                @blur=\"checkEmailOnBlur(customer.billing.email)\"\n                                @input=\"checkEmailOnInput(customer.billing.email)\"\n                                required\n                            />\n                            <Transition\n                                name=\"scale-y\"\n                                mode=\"out-in\"\n                            >\n                                <div\n                                    v-if=\"isInvalidEmail\"\n                                    class=\"mt-1 text-sm text-red-500\"\n                                >\n                                    Invalid email address\n                                </div>\n                            </Transition>\n                        </div>\n                        <template v-if=\"orderInput.createAccount\">\n                            <div class=\"w-full mt-4\">\n                                <label for=\"username\">{{ $t('messages.account.username') }}</label>\n                                <input\n                                    v-model=\"orderInput.username\"\n                                    placeholder=\"johndoe\"\n                                    autocomplete=\"username\"\n                                    type=\"text\"\n                                    name=\"username\"\n                                    required\n                                />\n                            </div>\n                            <div\n                                class=\"w-full my-2\"\n                                v-if=\"orderInput.createAccount\"\n                            >\n                                <label for=\"email\">{{ $t('messages.account.password') }}</label>\n                                <PasswordInput\n                                    id=\"password\"\n                                    class=\"my-2\"\n                                    v-model=\"orderInput.password\"\n                                    placeholder=\"••••••••••\"\n                                    :required=\"true\"\n                                />\n                            </div>\n                        </template>\n                        <div\n                            v-if=\"!viewer\"\n                            class=\"flex items-center gap-2 my-2\"\n                        >\n                            <label for=\"creat-account\">Create an account?</label>\n                            <input\n                                id=\"creat-account\"\n                                v-model=\"orderInput.createAccount\"\n                                type=\"checkbox\"\n                                name=\"creat-account\"\n                            />\n                        </div>\n                    </div>\n\n                    <div>\n                        <h2 class=\"w-full mb-3 text-2xl font-semibold\">{{ $t('messages.billing.billingDetails') }}</h2>\n                        <BillingDetails v-model=\"customer.billing\" />\n                    </div>\n\n                    <label\n                        v-if=\"cart.availableShippingMethods.length > 0\"\n                        for=\"shipToDifferentAddress\"\n                        class=\"flex items-center gap-2\"\n                    >\n                        <span>{{ $t('messages.billing.differentAddress') }}</span>\n                        <input\n                            id=\"shipToDifferentAddress\"\n                            v-model=\"orderInput.shipToDifferentAddress\"\n                            type=\"checkbox\"\n                            name=\"shipToDifferentAddress\"\n                        />\n                    </label>\n\n                    <Transition\n                        name=\"scale-y\"\n                        mode=\"out-in\"\n                    >\n                        <div v-if=\"orderInput.shipToDifferentAddress\">\n                            <h2 class=\"mb-4 text-xl font-semibold\">{{ $t('messages.general.shippingDetails') }}</h2>\n                            <ShippingDetails v-model=\"customer.shipping\" />\n                        </div>\n                    </Transition>\n\n                    <!-- Shipping methods -->\n                    <div v-if=\"cart.availableShippingMethods.length\">\n                        <h3 class=\"mb-4 text-xl font-semibold\">{{ $t('messages.general.shippingSelect') }}</h3>\n                        <ShippingOptions\n                            :options=\"cart.availableShippingMethods[0].rates\"\n                            :active-option=\"cart.chosenShippingMethods[0]\"\n                        />\n                    </div>\n\n                    <!-- Pay methods -->\n                    <div\n                        v-if=\"paymentGateways?.nodes.length\"\n                        class=\"mt-2 col-span-full\"\n                    >\n                        <h2 class=\"mb-4 text-xl font-semibold\">{{ $t('messages.billing.paymentOptions') }}</h2>\n                        <PaymentOptions\n                            v-model=\"orderInput.paymentMethod\"\n                            class=\"mb-4\"\n                            :paymentGateways\n                        />\n                        <StripeElement\n                            v-if=\"stripe\"\n                            v-show=\"orderInput.paymentMethod.id == 'stripe'\"\n                            :stripe\n                            @updateElement=\"handleStripeElement\"\n                        />\n                    </div>\n\n                    <!-- Order note -->\n                    <div>\n                        <h2 class=\"mb-4 text-xl font-semibold\">\n                            {{ $t('messages.shop.orderNote') }} ({{ $t('messages.general.optional') }})\n                        </h2>\n                        <textarea\n                            id=\"order-note\"\n                            v-model=\"orderInput.customerNote\"\n                            name=\"order-note\"\n                            class=\"w-full min-h-[100px]\"\n                            rows=\"4\"\n                            :placeholder=\"$t('messages.shop.orderNotePlaceholder')\"\n                        ></textarea>\n                    </div>\n                </div>\n\n                <OrderSummary>\n                    <button\n                        class=\"flex items-center justify-center w-full gap-3 p-3 mt-4 font-semibold text-center text-white rounded-lg shadow-md bg-primary hover:bg-primary-dark disabled:cursor-not-allowed disabled:bg-gray-400\"\n                        :disabled=\"isCheckoutDisabled\"\n                    >\n                        {{ buttonText\n                        }}<LoadingIcon\n                            v-if=\"isProcessingOrder\"\n                            color=\"#fff\"\n                            size=\"18\"\n                        />\n                    </button>\n                </OrderSummary>\n            </form>\n        </template>\n        <LoadingIcon\n            v-else\n            class=\"m-auto\"\n        />\n    </div>\n</template>\n\n<style lang=\"postcss\">\n.checkout-form input[type='text'],\n.checkout-form input[type='email'],\n.checkout-form input[type='tel'],\n.checkout-form input[type='password'],\n.checkout-form textarea,\n.checkout-form select,\n.checkout-form .StripeElement {\n    @apply bg-white border rounded-md outline-none border-gray-300 shadow-sm w-full py-2 px-4;\n}\n\n.checkout-form input.has-error,\n.checkout-form textarea.has-error {\n    @apply border-red-500;\n}\n\n.checkout-form label {\n    @apply my-1.5 text-xs text-gray-600 uppercase;\n}\n\n.checkout-form .StripeElement {\n    padding: 1rem 0.75rem;\n}\n</style>\n"],"version":3}