{"file":"lost-password-dGCSBSuS.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AACM,UAAA,EAAE,EAAE,IAAI,QAAQ;AACtB,UAAM,SAAS,UAAU;AACzB,UAAM,QAAQ,SAAS;AAC6B,YAAQ;AAEtD,UAAA,WAAW,IAAI,EAAE;AACjB,UAAA,kBAAkB,IAAI,EAAE;AACxB,UAAA,eAAe,IAAI,EAAE;AACrB,UAAA,YAAY,IAAI,KAAK;AACrB,UAAA,gBAAgB,IAAI,KAAK;AAE/B,QAAI,CAAC,MAAM,MAAM,OAAO,CAAC,MAAM,MAAM,OAAO;AACxC,aAAO,KAAK,mCAAmC;AAAA,IAAA;AA6C3C,YAAA;AAAA,MACJ,OAAO,EAAE,gCAAgC;AAAA,IAAA,CAC5C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5DD,QAAA,OAAAA,eAAAC,WAAA,EAAA,OAAA,6BAAA,MAAA,CAAA,CAAA,GAAA;AAAA,QAAAC,mBAAA,0BAAA,MAAA,MAAA,OAAA,CAAA;;;;;;;;;;","names":["_ssrRenderAttrs","_mergeProps","_ssrRenderComponent"],"sources":["../../../../../../../woonuxt_base/app/components/forms/ResetPassword.vue","../../../../../../../woonuxt_base/app/pages/my-account/lost-password.vue"],"sourcesContent":["<script setup lang=\"ts\">\nconst { t } = useI18n()\nconst router = useRouter()\nconst route = useRoute()\nconst { viewer, resetPasswordWithKey, loginUser } = useAuth()\n\nconst password = ref('')\nconst confirmPassword = ref('')\nconst errorMessage = ref('')\nconst isPending = ref(false)\nconst isInvalidLink = ref(false)\n\nif (!route.query.key && !route.query.login) {\n    router.push('/my-account?action=forgotPassword')\n}\n\nconst handlePasswordReset = async () => {\n    try {\n        errorMessage.value = ''\n        isInvalidLink.value = false\n        isPending.value = true\n\n        if (password.value !== confirmPassword.value) {\n            throw new Error(t('messages.error.passwordMismatch'))\n        }\n\n        const userInfo = {\n            key: route.query.key as string,\n            login: route.query.login as string,\n            password: password.value,\n        }\n\n        if (!userInfo.key || !userInfo.login) {\n            isInvalidLink.value = true\n            throw new Error(t('messages.error.invalidPasswordResetLink'))\n        }\n\n        const resetResult = await resetPasswordWithKey(userInfo)\n        if (!resetResult.success) {\n            isInvalidLink.value = true\n            throw new Error(resetResult.error)\n        }\n\n        if (viewer.value) {\n            const loginResult = await loginUser({ username: userInfo.login, password: userInfo.password })\n            if (!loginResult.success) {\n                throw new Error(loginResult.error)\n            }\n        }\n\n        router.push('/my-account')\n    } catch (error: any) {\n        errorMessage.value = error.message || t('messages.error.general')\n    } finally {\n        isPending.value = false\n    }\n}\n\nuseHead({\n    title: t('messages.account.resetPassword'),\n})\n</script>\n\n<template>\n    <div class=\"max-w-lg mx-auto my-16 min-h-[600px] lg:my-24\">\n        <div class=\"flex flex-col items-center\">\n            <Logo class=\"mb-6 scale-125\" />\n            <h1 class=\"text-xl font-semibold lg:text-3xl\">{{ $t('messages.account.resetPassword') }}</h1>\n        </div>\n\n        <form\n            class=\"mt-6 flex flex-col\"\n            @submit.prevent=\"handlePasswordReset\"\n        >\n            <label\n                for=\"password\"\n                class=\"mb-4\"\n            >\n                {{ $t('messages.account.newPassword') }} <span class=\"text-red-500\">*</span><br />\n                <PasswordInput\n                    id=\"password\"\n                    className=\" border rounded-lg w-full p-3 px-4 bg-white\"\n                    v-model=\"password\"\n                    placeholder=\"New Password\"\n                    :required=\"true\"\n                />\n            </label>\n\n            <label\n                for=\"confirmPassword\"\n                class=\"mb-4\"\n            >\n                {{ $t('messages.account.confirmNewPassword') }} <span class=\"text-red-500\">*</span><br />\n                <PasswordInput\n                    id=\"confirmPassword\"\n                    className=\"border rounded-lg w-full p-3 px-4 bg-white\"\n                    v-model=\"confirmPassword\"\n                    placeholder=\"Confirm Password\"\n                    :required=\"true\"\n                />\n            </label>\n\n            <Transition\n                name=\"scale-y\"\n                mode=\"out-in\"\n            >\n                <div\n                    v-if=\"errorMessage\"\n                    class=\"text-sm mb-4\"\n                >\n                    <span\n                        class=\"text-red-500\"\n                        v-html=\"errorMessage\"\n                    ></span>\n                    <NuxtLink\n                        v-if=\"isInvalidLink\"\n                        class=\"underline cursor-pointer pl-1\"\n                        to=\"/my-account?action=forgotPassword\"\n                        >{{ $t('messages.account.requestNewLink') }}</NuxtLink\n                    >\n                </div>\n            </Transition>\n\n            <button class=\"flex items-center justify-center gap-4 mt-4 text-lg\">\n                <LoadingIcon\n                    v-if=\"isPending\"\n                    stroke=\"4\"\n                    size=\"16\"\n                    color=\"#fff\"\n                />\n                <span>{{ $t('messages.account.resetPassword') }}</span>\n            </button>\n        </form>\n\n        <div class=\"my-8 text-center cursor-pointer\">\n            <NuxtLink to=\"/my-account\">{{ $t('messages.account.backToLogin') }}</NuxtLink>\n        </div>\n    </div>\n</template>\n\n<style lang=\"postcss\" scoped>\ninput,\nbutton {\n    @apply border rounded-lg mb-4 w-full p-3 px-4 bg-white;\n}\n\nform button {\n    @apply rounded-lg font-bold bg-gray-800 text-white py-3 px-8 hover:bg-gray-800;\n}\n</style>\n","<template>\n    <div class=\"container min-h-[600px]\">\n        <ResetPassword />\n    </div>\n</template>\n"],"version":3}